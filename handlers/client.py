from aiogram import types, Dispatcher
from create_bot import bot, dp
from keyboards.client_kb import button_case_client, button_case_get_contact
from aiogram.types import ReplyKeyboardRemove
from data_base.DB import get_rooms_list, get_room
from aiogram.types import InputMediaPhoto, InputMedia, MediaGroup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from data_base.DB import book_room, get_bookig_list, get_free_time_of_room


class FSMCreateBook(StatesGroup):
    name = State()
    month = State()
    day = State()
    time = State()
    phone = State()


async def send_welcome(message: types.Message):
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}!\n"
                         f"–î–∞–≤–∞–π –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤–º–µ—Å—Ç–µ!\n\n"
                         f"üèô /rooms - –ö–æ–º–∞–Ω–¥–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞.\n"
                         f"‚Ñπ /info - –ö–æ–º–∞–Ω–¥–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,"
                         f" –∞–¥—Ä–µ—Å –∏ –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å.\n"
                         f"üö´ /cancel - –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤—Å–µ–≥–¥–∞"
                         f" –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–≤–æ—ë –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞!",
                         reply_markup=button_case_client)


async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ!")


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('time '), state=FSMCreateBook.time)
async def get_date(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['time'] = callback_query.data.replace("time ", "")
        await bot.send_message(callback_query.from_user.id,
                               text='–ù–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                               reply_markup=button_case_get_contact)
        await FSMCreateBook.next()
        await callback_query.answer()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('day '), state=FSMCreateBook.day)
async def get_date(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['day'] = callback_query.data.replace("day ", "")
        free_time = await get_free_time_of_room(data['month'], data['day'])
        button_case = InlineKeyboardMarkup(row_width=5)
        if free_time is None:
            await bot.send_message(callback_query.from_user.id, text='–ù–∞ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ—Ç—É —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏,'
                                                                     ' –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å')
            await state.finish()
        else:
            for time in free_time:
                button_case.insert(InlineKeyboardButton(text=f'{time}', callback_data=f'time {time}'))
            await bot.send_message(callback_query.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è.",
                                   reply_markup=button_case
                                   )
            await FSMCreateBook.next()
            await callback_query.answer()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('month '), state=FSMCreateBook.month)
async def get_date(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['month'] = callback_query.data.replace("month ", "")
        button_case = InlineKeyboardMarkup(row_width=5)
        month_with_31days = ['–Ø–Ω–≤–∞—Ä—å', '–ú–∞—Ä—Ç', '–ú–∞–π', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–û–∫—Ç—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        month_with_30days = ['–ê–ø—Ä–µ–ª—å', '–ò—é–Ω—å', '–°–µ–Ω—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å']
        if data['month'] == '–§–µ–≤—Ä–∞–ª—å':
            for day in range(1, 29):
                button_case.insert(InlineKeyboardButton(text=f'{day}', callback_data=f'day {day}'))
        elif data['month'] in month_with_31days:
            for day in range(1, 31):
                button_case.insert(InlineKeyboardButton(text=f'{day}', callback_data=f'day {day}'))
        elif data['month'] in month_with_30days:
            for day in range(1, 30):
                button_case.insert(InlineKeyboardButton(text=f'{day}', callback_data=f'day {day}'))

        await bot.send_message(callback_query.from_user.id, text="–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ.",
                               reply_markup=button_case)
        await FSMCreateBook.next()
        await callback_query.answer()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('booking '), state=FSMCreateBook.name)
async def get_booking(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = callback_query.data.replace("booking ", "")
        month_list = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å',
                      '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        button_case = InlineKeyboardMarkup(row_width=3)
        for month in month_list:
            button_case.insert(InlineKeyboardButton(text=f'{month}', callback_data=f'month {month}'))
        await bot.send_message(callback_query.from_user.id, text="–ù–∞ –∫–∞–∫–æ–π –º–µ—Å—è—Ü –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä?",
                               reply_markup=button_case)
        await FSMCreateBook.next()
        await callback_query.answer()


async def rooms_list(message: types.Message):
    await FSMCreateBook.name.set()
    await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞—à–µ–≥–æ –æ—Ç–µ–ª—è")
    Apart = await get_rooms_list()
    for _apart in Apart:
        media = []
        for photo in _apart.aparts_photo:
            media.append(InputMediaPhoto(photo.photo_url))
        try:
            await bot.send_media_group(message.from_user.id, media)
            await bot.send_message(message.from_user.id, f"–ù–æ–º–µ—Ä :{_apart.apart_name}\n"
                                                         f"–¢–∏–ø –Ω–æ–º–µ—Ä–∞: {_apart.apart_type}\n"
                                                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {_apart.apart_description}\n"
                                                         f"–¶–µ–Ω–∞: {_apart.apart_price}")
            await bot.send_message(message.from_user.id, text='üëÜüëÜüëÜ',
                                   reply_markup=InlineKeyboardMarkup(row_width=1).add(
                                       InlineKeyboardButton(text=f'–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä'
                                                            , callback_data=f'booking {_apart.apart_name}')))

        except:
            await bot.send_photo(message.from_user.id, media)
            await bot.send_message(message.from_user.id, f"–ù–æ–º–µ—Ä :{_apart.apart_name}\n"
                                                         f"–¢–∏–ø –Ω–æ–º–µ—Ä–∞: {_apart.apart_type}\n"
                                                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {_apart.apart_description}\n"
                                                         f"–¶–µ–Ω–∞: {_apart.apart_price}")
            await bot.send_message(message.from_user.id, text='üëÜüëÜüëÜ',
                                   reply_markup=InlineKeyboardMarkup(row_width=1).add(
                                       InlineKeyboardButton(f'–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä',
                                                            callback_data=f'booking {_apart.apart_name}')))


@dp.message_handler(content_types=['contact'],
                    state=FSMCreateBook.phone)
async def get_phone(message: types.Contact, state: FSMContext):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    async with state.proxy() as data:
        await book_room(data['name'], data['month'], data['day'], data['time'], message.from_user.full_name,
                        message.from_user.id, message.contact.phone_number)

        await bot.send_message(message.from_user.id, text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n"
                                                          f"–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –Ω–æ–º–µ—Ä: {data['name']}\n"
                                                          f"–ú–µ—Å—è—Ü: {data['month']}\n"
                                                          f"–í—Ä–µ–º—è: {data['time']}\n"
                                                          f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É: "
                                                          f"{message.contact.phone_number}",
                               reply_markup=button_case_client)
        await state.finish()


async def info(user_id: types.User):
    await bot.send_message(user_id['from']['id'], text=f"üììüììüìì–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–ê–°üììüììüìì\n"
                                                       f"–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è - ...........\n\n"
                                                       f"‚òé‚òé‚òé–°–í–Ø–ó–ê–¢–¨–°–Ø –° –ù–ê–ú–ò –ú–û–ñ–ù–û‚òé‚òé‚òé\n"
                                                       f"–¢–µ–ª–µ–≥—Ä–∞–º - ...............\n"
                                                       f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - .........\n")


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start'])
    dp.register_message_handler(cancel_handler, state="*", commands=['cancel'])
    dp.register_message_handler(cancel_handler, Text(equals='cancel', ignore_case=True), state="*")
    dp.register_message_handler(rooms_list, commands=['rooms'], state=None)

    dp.register_message_handler(info, commands=["info"])
